Introduction
Whenever someone hits me with the adage "curiosity killed the cat," I always jump back with a 'joke on you' because a cat always lands on its feet. In any case, it has nine lives, or does it? All in all, while cats engage in numerous risky behaviors, they discover more fun in the process, and if they were to die, they would probably die very fulfilled - for they lived. Being curious in the right way often leads to enlightening and sometimes life-changing discoveries. After engaging in software engineering for a while, my instructors pegged a simple question, often used by interviewers, about how the internet works. In other words, what happens when you type google.com or any different URL?

I thought it was a simple reply, and I gladly took on the challenge to offer this reply. The deeper I delved into the matter, the more I unearthed some hidden gems and processes I never thought mattered. I did my best to summarize the findings and dumb things down so a twelve-year-old could easily understand them.

The Process
The web infrastructure entails clients, layouts, servers, and other elements supporting the website. In the development world, your web browser acts as the client, sending requests to access different domains. When you type a URL, e.g., google.com, and press, enter, the browser first checks through its cache to check for the domain's IP address in recent requests or the system's OS, such as Linux or Windows host files. If not found, the client makes a DNS (Domain Name System) request to initiate a TCP/IP (Transmission Control Protocol and Internet Protocol) request for the domain name. First, it asks the Resolver, often the Internet Service Provider, which also checks up its cache for the address; if not known, the ISP sends it to a Top Level Domain (TLD) server. For .net domains, the TLD is .NET or .com the TLD is .COM. The server also checks its cache for the requested address and returns the IP address to the client. If the TLD does not know the address, it has access to the authority holding the server and sends a request to the Name server to return the IP address successfully. Noteworthy, all this happens in less than a second.

Once the OS receives the IP address, it sends it back to the browser, which makes a GET HTTP request through the OS. The system packs the request in a TCP traffic protocol and sends it to the source. During transit, the system's and server's firewalls check the request for security violations. The server, usually a load balancer, receives the request and routes it to an available and capable server. The web server handles the HTTP request (handles static code base), and the Application server provides specialized functionality and content, including the dynamic code base and database. Upon receiving the request, the server sends a response to the client with an SSL (Secure Sockets Layer) certificate to initiate a secure session (HTTPS). Finally, the same server sends the webpage files containing HTML, CSS, and JavaScript scripts (if any) to the OS, which sends them to the browser for interpretation. The browser then displays the webpage.

Conclusion
The theory of things often seems difficult until we understand the concepts and try to simplify them for ourselves and for others. While I am fond of researching and understanding things, it is rare for me to explain the concepts to myself, let along others. I hope this simple description of the Web infrastructure will give you an insight into 'how the Internet works.' 
